//하프 변환은 근사화가 아니라 주어진 점들을 통과하는 라인을 정의한다. (선형회귀랑 다르다. 그 최소제곱해)
// y = ax + b를 b = -xa + y 로 변환 ( x,y가 변수인 식에서 a,b가 변수인 식이 된다.)
//   -> 어떤 두 점을 지나는 라인의 기울기가 a이고, y절편이 b라고 할 때, 두 점에서 동일한 게 a와 b임. 그래서 ab평면에서 정의되는 라인으로 교체하는 거임.
// y = ax + b를 xcosA + ysinA = r로 변환 (세타가 A, 로우가 r로 표현됨)

//b = -xa + y를 구현하는 로직
// 1) 파라미터 평면의 양자화(파라미터 공간을 셀들로 분할하기): 델타a와 델타b를 결정한다.
// 2) 초기에 모든 셀들을 0으로 설정한다.
// 3) 하프변환 대상 집합의 모든 점(xi, yi)에 대해 파라미터 a로 a축 상의 각각의 분할 값을 가지고 b = -xa + y를 계산한다.
//   -> 파라미터 a가 핵심! -> 얘가 추후의 하프변환에서의 A
// 4) b를 반올림을 하여 b축 상의 가장 가까운 값을 얻는다. -> 얘가 추후의 하프변환에서의 r
//   -> 왜냐면, 분할이니까, 꼭 b 위에 있다는 보장이 불가능.
// 5) 이렇게 a,b를 얻어 파라미터 공간의 a,b에 해당되는 셀에 1을 더한다. (이걸 모르겠는데, 이게 문제인건가)
// 6) 파라미터 공간에 보팅(1 더함)이 된 값은 해당되는 셀에 대응되는 파라미터 a,b로 정의되는 직선이 통과하는 점의 수를 의미한다. 
//   -> 아마.. 직선이 통과하는 점의 수라기보다는 그 셀에 대응되게 지나는 직선의 개수이려나? (내가 잘못 이해했을 확률: 100)(다시 확인) 
// 7) 파라미터 공간의 분할의 정도는 곧바로 추출할 라인의 근사도가 된다. 

//y = ax + b를 b = -xa + y로 변환 시 발생된 문제의 극복
//  -> 라인의 정규방정식 사용: xcosA + ysinA = r
//  -> A와 r 및 델타A와 델타r의 결정
//  -> r의 결정은 A의 범위에 영향을 받음.(왜냐하면 r가 음의 값이 존재하기 때문)
//    -> r이 음이될 수 있는 A의 범위 91도 ~ 180도

//HT 구현
// 삼각함수 계산 시간 단축: LUT
// 파라미터의 공간 설계
//  -> r의 최대 범위: 대상 픽셀들이 존재하는 사각형 영역을 R라 하자.
//     1) 0 <= A <= 90도: 0 <= r <= (R의 대각선 길이)
//     2) 0 <= A <= 180도: 0 <= r <= (R의 대각선 길이) + max{R의 가로길이, 세로길이}
// 하프 변환: 임의의 A값과 점의 좌표 x,y에 의해 r게산(x 알고, y 알고 , A 임의로 정하면 r 값 도출)
//   -> 파라미터 공간의 A와 r에 해당되는 셀에 보팅 실시
// 하프변환 후 관심라인을 정의하고자 할 때 y = ax + b로 재변환 ㄱㄱ (탭 - C응용 - 하프변환 - 8페이지)
